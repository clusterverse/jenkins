---

cluster_vars:
  tools:
    aws_access_key: "FAKEPASSWD"
    aws_secret_key: "FAKEPASSWD"
#    aws_sts_assume_role_arn: "arn:aws:iam::000000000000:role/MyRole"               # NOTE: Can only set aws_sts_assume_role_arn if aws_secret_key is not set
    ssh_connection_cfg:
      host: &host_ssh_connection_cfg
        ansible_user: "ansible"
        ansible_ssh_private_key_file: "FAKEPASSWD"
      bastion:
        ssh_args: '-o ProxyCommand="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i ./id_rsa_bastion -W %h:%p -q user@192.168.0.1"'
        ssh_priv_key: "FAKEPASSWD"
    vpc_name: "test{{buildenv}}"
    vpc_subnet_name_prefix: "{{buildenv}}-test-{{region}}"
    key_name: "test__id_rsa"
    termination_protection: "no"

    hosttype_vars:
      controller:
        auto_volumes:
          - { device_name: "/dev/sda1", mountpoint: "/", fstype: "ext4", volume_type: "gp3", volume_size: 16, encrypted: true, delete_on_termination: true }
          - { device_name: "/dev/sdf", mountpoint: "{{jenkins_controller.jobs_dir}}", fstype: "ext4", volume_type: "gp3", volume_size: 4, encrypted: true, delete_on_termination: true }
        flavor: t4g.small
        version: "{{jenkins_controller.docker_image.war_version | regex_replace('[\\.-]', '_') | default('')}}"
        vms_by_az: { a: 1, b: 0, c: 0 }

      agent:
        auto_volumes:
          - { device_name: "/dev/sdf", mountpoint: "{{host_docker.data_root_dir}}", fstype: "ext4", volume_type: "gp3", volume_size: 32, encrypted: true, delete_on_termination: true }
        flavor: t4g.medium
        version: "{{jenkins_controller.docker_image.war_version | regex_replace('[\\.-]', '_') | default('')}}"
        vms_by_az: { a: 1, b: 1, c: 0 }

_host_ssh_connection_cfg: { <<: *host_ssh_connection_cfg }
