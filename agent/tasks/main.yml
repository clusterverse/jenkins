---

- name: jenkins Docker build
  block:
#    - name: jenkins Docker | prune old docker images & volumes
#      become: yes
#      shell: "docker image prune -f; docker volume prune -f"

    - name: Assert that if host_docker.network.container.cidr is defined (and valid IP), host_docker.network.container.name is also defined (we cannot change the cidr of the default 'bridge' network)
      assert: { that: "host_docker.network.container.name is defined and host_docker.network.container.cidr | ipaddr('network/prefix') | length", fail_msg: "If host_docker.network.container.cidr is defined, host_docker.network.container.name must also be defined" }
      when: "host_docker.network.container.mode=='bridge' and host_docker.network.container.cidr is defined"

    - name: jenkins Docker | Create the Docker network
      become: yes
      docker_network:
        name: "{{ host_docker.network.container.name }}"
        ipam_config: "{%- if host_docker.network.container.cidr is defined -%}[{'subnet': '{{host_docker.network.container.cidr}}'}]{%- else-%}[]{%- endif -%}"
      when: "host_docker.network.container.mode=='bridge' and host_docker.network.container.name is defined"

    - name: jenkins Docker | Create temporary build directory
      become: yes
      tempfile:
        state: directory
        suffix: DockerBuildTEMP
      register: tmp_build_dir

    - name: jenkins Docker | get host docker group (stored as getent_group['docker'][1])
      getent:
        database: group
        key: docker

    - block:
        - name: jenkins Docker | Get the Jenkins swarm release
          uri:
            url: "https://repo.jenkins-ci.org/releases/org/jenkins-ci/plugins/swarm-client/maven-metadata.xml"
            return_content: yes
            status_code: 200
          register: r__uri

        - name: jenkins Docker | Extract the xml from the Jenkins swarm release metadata
          xml:
            xmlstring : "{{r__uri.content}}"
            content: "text"
            xpath: "/metadata/versioning/latest"
          delegate_to: localhost
          run_once: true
          register: r__xml

        - name: jenkins Docker | r__xml.matches[0].latest
          debug: msg={{r__xml.matches[0].latest}}
      when: jenkins_agent.swarm_version == 'latest'

    - name: jenkins Docker | copy jenkins swarm agent template
      become: yes
      template:
        src: "{{item}}"
        dest: "{{ tmp_build_dir.path }}/{{item | basename | regex_replace('^(.*?)\\.j2', '\\1')}}"
      with_items:
        - "Dockerfile.j2"
      vars:
        host_docker_gid: "{{getent_group['docker'][1]}}"

    - name: jenkins Docker | Build the jenkins Docker image
      become: yes
      docker_image:
        source: build
        build:
          args:
            SWARM_VERSION: "{{ r__xml.matches[0].latest | default(jenkins_agent.swarm_version) }}"
          network: host
          pull: yes
          nocache: no       # Setting this to 'yes' will cause a rebuild every time, forcing a new image to be built, even if no changes have been made to the Dockerfile.
          rm: yes
          path: "{{ tmp_build_dir.path }}"
        force_source: true
        name: "jenkins_swarm_agent:latest"
      register: r__docker_image

    - name: jenkins Docker | Get the jenkins Docker image id
      become: yes
      docker_image_info:
        name: "jenkins_swarm_agent:latest"
      register: r__docker_image_info

    - name: jenkins Docker | Create and run the jenkins Docker container
      become: yes
      docker_container:
        env:
          JENKINS_USER: "{{jenkins_admin_username}}"
          JENKINS_PASS: "{{jenkins_admin_password}}"
          JENKINS_NAME: "{{inventory_hostname}}"
          JENKINS_MASTER: "http://{% if cluster_vars.dns_server is defined and cluster_vars.dns_server != '' and cluster_vars.dns_user_domain is defined %}{{ groups['controller'][0] }}.{{ cluster_vars.dns_user_domain | regex_replace('\\.*$') }}{% else %}{{ hostvars[groups['controller'][0]]['ansible_host'] }}{% endif %}:80"
          JENKINS_EXECUTORS: "{{ (((ansible_memtotal_mb|int / 1024) + (ansible_processor_vcpus * 2)) * jenkins_agent.numExecutorsMultiplier) | round(0,'ceil')|int }}"    # A rough calculator == ((2*Number of vCPUs) + (GB Ram)) * scaling factor
        cleanup: no
        detach: yes
        name: "jenkins_swarm_agent"
        user: "{{jenkins_uid}}:{{jenkins_gid}}"
        groups: ["docker"]
        hostname: "docker--{{inventory_hostname}}"
        image: "{{r__docker_image_info.images[0].Id}}"
        recreate: no        # Setting this to 'yes' forces reprovisioning of the container even if the image has not changed
        state: started
        restart_policy: "always"
        network_mode: "{{ host_docker.network.container.mode | default('bridge') }}"
        networks_cli_compatible: yes
        networks: "[{%- if host_docker.network.container.mode=='bridge' and host_docker.network.container.name is defined -%}{'name': '{{host_docker.network.container.name}}'}{%- endif -%}]"
        mounts:
          - target: "{{jenkins_home_dir}}"
            source: "jenkins_home"
            type: volume
          - target: "/var/run/docker.sock"
            source: "/var/run/docker.sock"
            type: bind

    - name: jenkins Docker | Remove temporary build directory
      become: yes
      file:
        path: "{{ tmp_build_dir.path }}"
        state: absent
